#!/bin/bash

#
# Copyright 2017-2020 Government of Canada - Public Services and Procurement Canada - buyandsell.gc.ca
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e
SCRIPT_HOME=$(readlink -f $(dirname "${0}"))

# --------------------------------------------------------------------------------------------------------------
# Usage:
# --------------------------------------------------------------------------------------------------------------
usage() {
    cat <<-EOF

    Usage: ${0} {build|start|bg|stop|rm|tidy}

    Options:

    build - Build the docker image for the project. Do this first.

    start - Create the application container from the build image
            and start the service.

    bg -    Create the application container from the build image
            and start the service in the background.

    stop -  Stop the service. This is a non-destructive process. It does not
            delete the container; the next call to start will reuse it.

    rm -    Remove any existing application container, as built through this 
            script via docker-compose -- any further containers will remain.

    tidy -  Remove all dangling images

EOF
exit 1
}

# --------------------------------------------------------------------------------------------------------------
# Default settings:
# --------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------
# Functions:
# --------------------------------------------------------------------------------------------------------------

configure_env() {
    if [ -f .env ]
    then
        export $(cat .env | xargs)
    fi

    for ARG in $@
    do
        case "${ARG}" in
            *=*)
                export ${ARG}
                ;;
        esac
    done
}

get_dc_args() {
    ARGS=''
    DC_FILE="docker-compose.yml"
    DC_COMMAND=${1}
    shift
    COLOUR=1

    if [ "${COMMAND}" == "start" ]
    then
        ARGS+="--force-recreate --abort-on-container-exit"
    elif [ "${COMMAND}" == "rm" ]
    then
        ARGS+="--force"
    fi

    for ARG in $@
    do
        case "${ARG}" in
            --no-ansi)
                COLOUR=0;;
            *=*)
                ;;
            -*)
                ARGS+=" ${ARG}";;
            *)
                ;;
        esac
    done

    OPTS="-f ${DC_FILE}"
    [ "${COLOUR}" -eq "0" ] && OPTS="${OPTS} --no-ansi"

    echo ${OPTS} ${DC_COMMAND} ${ARGS}
}

_update() {
    PATH_SRC=$1
    PATH_DEST=$2

    RV=0
    if [[ ! -f "${PATH_DEST}" || "${PATH_SRC}" -nt "${PATH_DEST}" ]]
    then
        if [ -f "${PATH_SRC}" ]
        then
            RV=1
            cp -p "${PATH_SRC}" "${PATH_DEST}"
        else
            echo "Error: missing '${PATH_SRC}'; install von_base before von_tails" > /dev/stderr
            exit 1
        fi
    fi

    echo ${RV}
}

build() {
    VON_BASE_FILES=$(dirname $(dirname "${SCRIPT_HOME}"))/von_base/files
    RM_LIBINDY=$(_update "${VON_BASE_FILES}/libindy.so.tgz" "${SCRIPT_HOME}/libindy.so.tgz")
    RM_INDY_POOL_DF=0

    IMAGES=$(printf " %s" "${@}")
    IMAGES=${IMAGES##*build}
    if [[ -z "${IMAGES// /}" || "${IMAGES}" = *"indy_pool"* ]]
    then
        RM_INDY_POOL_DF=$(_update "${VON_BASE_FILES}/indy-pool.dockerfile" "${SCRIPT_HOME}/indy-pool.dockerfile")
    fi

    echo -e "\nBuilding containers ..."
    docker-compose $@

    # only remove files this process actually copied over - retain operator-overridden selections
    if [ "${RM_LIBINDY}" -ne "0" ]
    then
        rm -rf "${SCRIPT_HOME}/libindy.so.tgz"
        echo "Used von_base libindy.so.tgz, copied to ${SCRIPT_HOME} for docker build then removed"
    else
        echo "Used and retained local ${SCRIPT_HOME}/libindy.so.tgz for docker build"
    fi

    if [ "${RM_INDY_POOL_DF}" -ne "0" ]
    then
        rm -rf "${SCRIPT_HOME}/indy-pool.dockerfile"
        echo "Used von_base indy-pool.dockerfile, copied to ${SCRIPT_HOME} for docker build then removed"
    else
        echo "Used and retained local ${SCRIPT_HOME}/indy-pool.dockerfile"
    fi
}

# --------------------------------------------------------------------------------------------------------------

pushd "${SCRIPT_HOME}" > /dev/null
COMMAND="${1}"
shift || true

case "${COMMAND}" in
    bg)
        DC_ARGS=$(get_dc_args up --no-start $@)
        configure_env $@
        docker-compose ${DC_ARGS}
        docker-compose ${DC_ARGS/up --no-start/start}
        ;;
    start)
        DC_ARGS=$(get_dc_args up $@)
        configure_env $@
        docker-compose ${DC_ARGS}
        ;;
    stop)
        DC_ARGS=$(get_dc_args stop $@)
        configure_env $@
        docker-compose ${DC_ARGS}
        ;;
    rm)
        DC_ARGS=$(get_dc_args rm $@)
        configure_env $@
        docker-compose ${DC_ARGS}
        ;;
    build)
        DC_ARGS=$(get_dc_args build $@)
        configure_env $@
        build ${DC_ARGS}
        ;;
    tidy)
        while read -r HASH; do docker rmi ${HASH}; done < <(docker images -f 'dangling=true' -q)
        ;;
    *)
        usage
esac

popd > /dev/null
